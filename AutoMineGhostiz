print('✅B S M 2 AutoMine v. 1.5.1.✅')


local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = character:WaitForChild('HumanoidRootPart')
local gameContentFolder = workspace:FindFirstChild('__GAME_CONTENT')


local folderName = "BSM2_by_GHOSTIZ"
local fileName = "settings.json"
local filePath = folderName .. "/" .. fileName


local AutoMine = false
local AutoShard = false
local DistFromOre = 4
local OreSearch = {}


if not isfolder(folderName) then
	makefolder(folderName)
end


local function LoadSettings()
	if isfile(filePath) then
		local content = readfile(filePath)
		local data = HttpService:JSONDecode(content)
		AutoMine = data.AutoMine or false
		DistFromOre = data.DistFromOre or 4
		OreSearch = data.OreSearch or {}
	end
end


local function SaveSettings()
	local data = {
		AutoMine = AutoMine,
		DistFromOre = DistFromOre,
		OreSearch = OreSearch
	}
	local json = HttpService:JSONEncode(data)
	writefile(filePath, json)
end


local OreFolder = nil
for _,v in pairs(gameContentFolder:GetDescendants()) do
	if v:IsA('Folder') and v.Name:lower() == 'stone' then
		OreFolder = v.Parent
		break
	end
end


for _, ores in pairs(OreFolder:GetChildren()) do
	local name = ores.Name:lower()
	if OreSearch[name] == nil then
		OreSearch[name] = false
	end
end


LoadSettings()

local function Shards()
	while AutoShard do
		local Players = game:GetService("Players")
		local PathfindingService = game:GetService("PathfindingService")

		local player = Players.LocalPlayer
		local character = player.Character or player.CharacterAdded:Wait()
		local humanoid = character:WaitForChild("Humanoid")
		local hrp = character:WaitForChild("HumanoidRootPart")

		local startPosition = hrp.Position

		local function getShardFolder()
			local gameContent = workspace:FindFirstChild("__GAME_CONTENT")
			if not gameContent then return nil end
			return gameContent:FindFirstChild("FireBurstShards")
		end

		local function moveToPosition(targetPos)
			local path = PathfindingService:CreatePath({
				AgentRadius = 2,
				AgentHeight = 5,
				AgentCanJump = true,
				AgentCanClimb = true,
				Costs = {}
			})

			path:ComputeAsync(hrp.Position, targetPos)

			if path.Status == Enum.PathStatus.Success then
				for _, waypoint in ipairs(path:GetWaypoints()) do
					humanoid:MoveTo(waypoint.Position)
					humanoid.MoveToFinished:Wait()
				end
			end
		end

		local function findTargetPositionInModel(model)
			if model.PrimaryPart then
				return model.PrimaryPart.Position
			end

			for _, part in ipairs(model:GetDescendants()) do
				if part:IsA("BasePart") then
					return part.Position
				end
			end

			return nil
		end

		local function searchAndMove()
			local folder = getShardFolder()
			if not folder then
				return
			end

			local models = {}

			for _, obj in ipairs(folder:GetChildren()) do
				if obj:IsA("Model") then
					table.insert(models, obj)
				end
			end

			if #models == 0 then
				moveToPosition(startPosition)
				return
			end

			for _, model in ipairs(models) do
				local pos = findTargetPositionInModel(model)
				if pos then
					moveToPosition(pos)
					wait(0.5)
				end
			end
		end
		wait(10)
	end
end

local function SearchOre()
	local OreTarget = nil
	local MinimalDistance = math.huge

	local char = LocalPlayer.Character
	local HRP = char.HumanoidRootPart
	
	if #OreFolder:GetChildren() == 0 then return nil
	
	for _, ores in pairs(OreFolder:GetChildren()) do
		if OreSearch[ores.Name:lower()] then
			for _, ore in pairs(ores:GetChildren()) do
				if #ore.Block:GetChildren() >= 4 then
					local TouchPart = ore.Touch
					local distance = (TouchPart.Position - HRP.Position).Magnitude
					if distance < MinimalDistance then
						OreTarget = TouchPart
						MinimalDistance = distance
					end
				end
			end
		end
	end

	return OreTarget, MinimalDistance
end

local function Mine()
	while AutoMine do
		local OreTarget, MinimalDistance = SearchOre()

		local Humanoid = character.Humanoid

		if OreTarget then
			for _,v in pairs(OreTarget:GetDescendants()) do
				if v:IsA('MeshPart') or v:IsA('BasePart') then
					v.CanCollide = false
				end
			end

			if MinimalDistance >= DistFromOre + 1 then
				local direction = (HumanoidRootPart.Position - OreTarget.Position).Unit
				local offset = direction * DistFromOre 
				local targetPosition = OreTarget.Position + offset
				Humanoid:MoveTo(targetPosition)
				Humanoid.MoveToFinished:Wait()
			end
		end

		task.wait(.1)
	end
end
SaveSettings()

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local PhantomForcesWindow = Library:NewWindow("GHOSTIZ")
local Main = PhantomForcesWindow:NewSection("Main")
local SelectOres = PhantomForcesWindow:NewSection("Select Ores")


Main:CreateToggle("Auto Mine", function(value)
	AutoMine = value
	SaveSettings()
	Mine()
end)
Main:CreateToggle("Auto Shard", function(value)
	AutoShard = value
	SaveSettings()
	Shards()
end)

Main:CreateSlider("DistFromOre", 1, 7, DistFromOre, false, function(value)
	DistFromOre = value
	SaveSettings()
end)

for name, status in pairs(OreSearch) do
	SelectOres:CreateToggle(name:upper(), function(value)
		OreSearch[name:lower()] = value
		SaveSettings()
	end)
end

Main:CreateButton("DESTROY GUI", function()
	AutoMine = false
	SaveSettings()
	for i, v in pairs(game.CoreGui:GetChildren()) do
		if v.Name == "WizardLibrary" then
			v:Destroy()
		end
	end
end)
